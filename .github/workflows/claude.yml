name: Claude Code

on:
  # issue_comment:
  #  types: [created]
  pull_request_review_comment:
    types: [created]
  # issues:
  # types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v0.0.40
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run project-specific commands
          allowed_tools: "Bash(make lint),Bash(make format),Bash(make type-check),Bash(make test),Bash(uv sync),Bash(make dev-install),Bash(make run-api),Bash(make migrate-upgrade),Bash(make migrate-create MESSAGE=*)"
          
          # Custom instructions for analytics backend monorepo
          custom_instructions: |
            Follow the analytics backend monorepo conventions:
            - Use Python 3.11+ features and type hints for all functions
            - Follow ruff formatting (88 char line length)
            - Use Pydantic for data validation and settings
            - Use structured logging with structlog
            - Follow async/await patterns for I/O operations
            - Shared functionality goes in libs/, services are independent
            - All code must pass linting, type checking, and tests
            - Use feature branches and reference issue numbers in commits
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test


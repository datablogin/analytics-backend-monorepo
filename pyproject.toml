[project]
name = "analytics-backend"
version = "0.1.0"
description = "Analytics backend monorepo with shared libraries and microservices"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.19.0",
    "greenlet>=3.0.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "httpx>=0.25.0",
    "structlog>=23.2.0",
    "python-multipart>=0.0.6",
    "pyjwt>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "pyyaml>=6.0.2",
    "types-pyyaml>=6.0.12.20250516",
    "aiofiles>=24.1.0",
    "types-aiofiles>=24.1.0.20250708",
    "great-expectations>=1.5.5",
    "ydata-profiling>=4.0.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-exporter-prometheus<=1.12.0rc1",
    "opentelemetry-exporter-jaeger>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.40b0",
    "opentelemetry-instrumentation-requests>=0.40b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.40b0",
    "opentelemetry-instrumentation-redis>=0.40b0",
    "prometheus-client>=0.19.0",
    "deprecated>=1.2.18",
    "croniter>=3.0.0",
    "types-croniter>=3.0.0",
    "types-requests>=2.31.0.0",
    "scipy>=1.11.0",
    "statsmodels>=0.14.0",
    "pymc>=5.10.0",
    # Data warehouse connectors
    "snowflake-connector-python>=3.16.0",
    "google-cloud-bigquery>=3.25.0",
    "redshift-connector>=2.1.0",
    "pyarrow>=17.0.0",
]

[project.optional-dependencies]
ml = [
    "scikit-learn>=1.3.0",
    "lightgbm>=4.1.0",
    "joblib>=1.3.0",
    "mlflow>=2.15.1",
    "boto3>=1.35.0",  # For S3 artifact storage
    "evidently>=0.4.22",  # For model monitoring and drift detection
    "optuna>=3.6.1",  # For hyperparameter optimization
    "shap>=0.45.0",  # For model explainability
    "alibi>=0.9.4",  # For model explainability
    "feast>=0.38.0",  # For feature store
    "dvc[s3]>=3.48.4",  # For data version control
    "bentoml>=1.3.0",  # For model serving
    "kubernetes>=30.1.0",  # For k8s model deployment
]
dev = [
    "ruff>=0.1.6",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "safety>=2.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-timeout>=2.3.1",
    "httpx>=0.25.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["libs", "services"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = ["E501", "UP017", "N806"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
exclude = [
    "services/feature_store/lineage.py",
    "services/feature_store/monitoring.py", 
    "services/feature_store/pipeline.py"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
timeout = 300  # 5 minutes max per test
timeout_method = "thread"  # Use thread-based timeout

[dependency-groups]
dev = [
    "anyio>=4.9.0",
    "faker>=37.4.2",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "respx>=0.22.0",
]

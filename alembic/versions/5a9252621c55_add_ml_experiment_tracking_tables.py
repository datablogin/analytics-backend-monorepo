"""Add ML experiment tracking tables

Revision ID: 5a9252621c55
Revises: e5356177cc7e
Create Date: 2025-07-23 17:55:51.931385

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5a9252621c55"
down_revision: str | Sequence[str] | None = "e5356177cc7e"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "experiments",
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("tags", sa.JSON(), nullable=True),
        sa.Column("artifact_location", sa.String(length=500), nullable=True),
        sa.Column("lifecycle_stage", sa.String(length=50), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"], ["users.id"], name=op.f("fk_experiments_owner_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experiments")),
    )
    op.create_index(op.f("ix_experiments_id"), "experiments", ["id"], unique=False)
    op.create_index(
        op.f("ix_experiments_lifecycle_stage"),
        "experiments",
        ["lifecycle_stage"],
        unique=False,
    )
    op.create_index(op.f("ix_experiments_name"), "experiments", ["name"], unique=True)
    op.create_index(
        op.f("ix_experiments_owner_id"), "experiments", ["owner_id"], unique=False
    )
    op.create_table(
        "experiment_runs",
        sa.Column("experiment_id", sa.Integer(), nullable=False),
        sa.Column("run_uuid", sa.String(length=32), nullable=False),
        sa.Column("name", sa.String(length=250), nullable=True),
        sa.Column("source_type", sa.String(length=20), nullable=True),
        sa.Column("source_name", sa.String(length=500), nullable=True),
        sa.Column("entry_point_name", sa.String(length=50), nullable=True),
        sa.Column("user_id", sa.String(length=256), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("start_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("end_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("lifecycle_stage", sa.String(length=20), nullable=False),
        sa.Column("artifact_uri", sa.String(length=200), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["experiment_id"],
            ["experiments.id"],
            name=op.f("fk_experiment_runs_experiment_id_experiments"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experiment_runs")),
    )
    op.create_index(
        op.f("ix_experiment_runs_experiment_id"),
        "experiment_runs",
        ["experiment_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experiment_runs_id"), "experiment_runs", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_experiment_runs_run_uuid"),
        "experiment_runs",
        ["run_uuid"],
        unique=True,
    )
    op.create_index(
        op.f("ix_experiment_runs_status"), "experiment_runs", ["status"], unique=False
    )
    op.create_table(
        "metrics",
        sa.Column("run_uuid", sa.String(length=32), nullable=False),
        sa.Column("key", sa.String(length=250), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("step", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["run_uuid"],
            ["experiment_runs.run_uuid"],
            name=op.f("fk_metrics_run_uuid_experiment_runs"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_metrics")),
    )
    op.create_index("idx_metrics_run_key", "metrics", ["run_uuid", "key"], unique=False)
    op.create_index(op.f("ix_metrics_id"), "metrics", ["id"], unique=False)
    op.create_index(op.f("ix_metrics_key"), "metrics", ["key"], unique=False)
    op.create_index(op.f("ix_metrics_run_uuid"), "metrics", ["run_uuid"], unique=False)
    op.create_index(
        op.f("ix_metrics_timestamp"), "metrics", ["timestamp"], unique=False
    )
    op.create_table(
        "params",
        sa.Column("run_uuid", sa.String(length=32), nullable=False),
        sa.Column("key", sa.String(length=250), nullable=False),
        sa.Column("value", sa.String(length=6000), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["run_uuid"],
            ["experiment_runs.run_uuid"],
            name=op.f("fk_params_run_uuid_experiment_runs"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_params")),
    )
    op.create_index("idx_params_run_key", "params", ["run_uuid", "key"], unique=False)
    op.create_index(op.f("ix_params_id"), "params", ["id"], unique=False)
    op.create_index(op.f("ix_params_key"), "params", ["key"], unique=False)
    op.create_index(op.f("ix_params_run_uuid"), "params", ["run_uuid"], unique=False)
    op.create_table(
        "run_tags",
        sa.Column("run_uuid", sa.String(length=32), nullable=False),
        sa.Column("key", sa.String(length=250), nullable=False),
        sa.Column("value", sa.String(length=5000), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["run_uuid"],
            ["experiment_runs.run_uuid"],
            name=op.f("fk_run_tags_run_uuid_experiment_runs"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_run_tags")),
    )
    op.create_index(
        "idx_run_tags_run_key", "run_tags", ["run_uuid", "key"], unique=False
    )
    op.create_index(op.f("ix_run_tags_id"), "run_tags", ["id"], unique=False)
    op.create_index(op.f("ix_run_tags_key"), "run_tags", ["key"], unique=False)
    op.create_index(
        op.f("ix_run_tags_run_uuid"), "run_tags", ["run_uuid"], unique=False
    )
    op.create_index(
        "ix_user_roles_role_id_user_id",
        "user_roles",
        ["role_id", "user_id"],
        unique=False,
    )
    op.create_index(
        "ix_user_roles_user_id_role_id",
        "user_roles",
        ["user_id", "role_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_user_roles_user_id_role_id", table_name="user_roles")
    op.drop_index("ix_user_roles_role_id_user_id", table_name="user_roles")
    op.drop_index(op.f("ix_run_tags_run_uuid"), table_name="run_tags")
    op.drop_index(op.f("ix_run_tags_key"), table_name="run_tags")
    op.drop_index(op.f("ix_run_tags_id"), table_name="run_tags")
    op.drop_index("idx_run_tags_run_key", table_name="run_tags")
    op.drop_table("run_tags")
    op.drop_index(op.f("ix_params_run_uuid"), table_name="params")
    op.drop_index(op.f("ix_params_key"), table_name="params")
    op.drop_index(op.f("ix_params_id"), table_name="params")
    op.drop_index("idx_params_run_key", table_name="params")
    op.drop_table("params")
    op.drop_index(op.f("ix_metrics_timestamp"), table_name="metrics")
    op.drop_index(op.f("ix_metrics_run_uuid"), table_name="metrics")
    op.drop_index(op.f("ix_metrics_key"), table_name="metrics")
    op.drop_index(op.f("ix_metrics_id"), table_name="metrics")
    op.drop_index("idx_metrics_run_key", table_name="metrics")
    op.drop_table("metrics")
    op.drop_index(op.f("ix_experiment_runs_status"), table_name="experiment_runs")
    op.drop_index(op.f("ix_experiment_runs_run_uuid"), table_name="experiment_runs")
    op.drop_index(op.f("ix_experiment_runs_id"), table_name="experiment_runs")
    op.drop_index(
        op.f("ix_experiment_runs_experiment_id"), table_name="experiment_runs"
    )
    op.drop_table("experiment_runs")
    op.drop_index(op.f("ix_experiments_owner_id"), table_name="experiments")
    op.drop_index(op.f("ix_experiments_name"), table_name="experiments")
    op.drop_index(op.f("ix_experiments_lifecycle_stage"), table_name="experiments")
    op.drop_index(op.f("ix_experiments_id"), table_name="experiments")
    op.drop_table("experiments")
    # ### end Alembic commands ###

# SECURITY NOTICE: This file contains template secret definitions
# DO NOT use these values in production - they are examples only
# 
# For production deployment, use one of these secure approaches:
# 1. External Secrets Operator with AWS Secrets Manager/HashiCorp Vault
# 2. Sealed Secrets or similar GitOps-friendly secret management
# 3. Manual secret creation using kubectl with secure credentials
#
# Example using External Secrets Operator:
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: streaming-secrets
#   namespace: streaming-analytics  
# spec:
#   secretStoreRef:
#     name: aws-secrets-manager
#     kind: SecretStore
#   target:
#     name: streaming-secrets
#   data:
#   - secretKey: STREAMING_KAFKA__SASL_USERNAME
#     remoteRef:
#       key: streaming-analytics/kafka
#       property: username
#   - secretKey: STREAMING_KAFKA__SASL_PASSWORD  
#     remoteRef:
#       key: streaming-analytics/kafka
#       property: password

apiVersion: v1
kind: Secret
metadata:
  name: streaming-secrets
  namespace: streaming-analytics
  labels:
    app: streaming-analytics
type: Opaque
stringData:
  # TEMPLATE VALUES - MUST BE REPLACED IN PRODUCTION
  # Use secure external secret management for production deployments
  
  # Kafka credentials - replace with actual values from external secret store
  STREAMING_KAFKA__SASL_USERNAME: "REPLACE_WITH_EXTERNAL_SECRET"
  STREAMING_KAFKA__SASL_PASSWORD: "REPLACE_WITH_EXTERNAL_SECRET"
  
  # Database credentials - replace with actual values from external secret store  
  DATABASE_USER: "REPLACE_WITH_EXTERNAL_SECRET"
  DATABASE_PASSWORD: "REPLACE_WITH_EXTERNAL_SECRET"
  
  # Redis password - replace with actual values from external secret store
  REDIS_PASSWORD: "REPLACE_WITH_EXTERNAL_SECRET"
  
  # MLflow token - replace with actual values from external secret store
  STREAMING_MLFLOW_TRACKING_TOKEN: "REPLACE_WITH_EXTERNAL_SECRET"
  
  # JWT secret for WebSocket authentication - replace with actual values from external secret store
  JWT_SECRET_KEY: "REPLACE_WITH_EXTERNAL_SECRET"
  
  # SSL/TLS certificate paths
  STREAMING_WEBSOCKET__SSL_CERT_PATH: "/etc/ssl/certs/websocket.crt"
  STREAMING_WEBSOCKET__SSL_KEY_PATH: "/etc/ssl/private/websocket.key"
  STREAMING_WEBSOCKET__SSL_CA_PATH: "/etc/ssl/certs/ca.crt"
---
# TLS Secret template - replace with actual certificates in production
# For production, consider using cert-manager for automatic certificate management
apiVersion: v1
kind: Secret
metadata:
  name: streaming-tls-secret
  namespace: streaming-analytics
  labels:
    app: streaming-analytics
  annotations:
    # Example for cert-manager integration
    # cert-manager.io/issuer: "letsencrypt-prod"
type: kubernetes.io/tls
stringData:
  # TEMPLATE VALUES - MUST BE REPLACED IN PRODUCTION
  # Use cert-manager or external certificate management for production
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    REPLACE_WITH_ACTUAL_CERTIFICATE_IN_PRODUCTION
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_ACTUAL_PRIVATE_KEY_IN_PRODUCTION
    -----END PRIVATE KEY-----
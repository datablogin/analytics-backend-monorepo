receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus scraper
  prometheus:
    config:
      scrape_configs:
        - job_name: 'analytics-services'
          static_configs:
            - targets: ['host.docker.internal:8000', 'host.docker.internal:8090']

processors:
  # Batch traces and metrics for efficiency
  batch:
    timeout: 1s
    send_batch_size: 1024

  # Sample traces to reduce volume
  probabilistic_sampler:
    sampling_percentage: 20.0

  # Add resource attributes
  resource:
    attributes:
      - key: service.name
        value: analytics-backend
        action: upsert
      - key: deployment.environment
        value: development
        action: upsert

  # Transform metrics
  metricstransform:
    transforms:
      - include: ^system_(.+)
        match_type: regexp
        action: update
        new_name: analytics_system_${1}

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128

exporters:
  # Export traces to Jaeger
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true

  # Export metrics to Prometheus
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: analytics
    const_labels:
      environment: development

  # Export traces and metrics to Prometheus (alternative)
  prometheusremotewrite:
    endpoint: http://prometheus:9090/api/v1/write

  # Logging exporter for debugging
  logging:
    loglevel: info

  # OTLP exporter for chaining collectors
  otlp:
    endpoint: jaeger:4317
    tls:
      insecure: true

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, probabilistic_sampler, batch]
      exporters: [jaeger, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, metricstransform, batch]
      exporters: [prometheus, logging]

    # Logs pipeline (for future use)
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [logging]

  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888